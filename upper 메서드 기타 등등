#upper 메서드를 호출하면 문자열을 대문자로 만들 수 있다.
#다만 이 경우에도 원본 문자열은 유지되고 대문자로 변경된 새로운 문자열 객체가 반환되는 것이다. 
#반환된 새로운 객체를 새로운 변수로 바인딩한 후 이를 print 함수로 출력하면 된다.
ticker = "btc_krw"
ticker1 = ticker.upper()
print(ticker1)



#lower 메서드 upper 메서드와 반대이다.
#문자열을 소문자로 만들어준다.
ticker = "BTC_KRW"
ticker1 = ticker.lower()
print(ticker1)



#capitalize 메서드
문자열의 앞 문자를 대문자로 만들어준다.
a = "hello"
a = a.capitalize()



#endswith 메서드
#파일 이름이 'xlsx'로 끝나는지 확인하는 방법.
file_name = "보고서.xlsx"
print(file_name.endswith("xlsx"))
결과값으로 True 가 나온다.



#파일 이름이 'xlsx' 또는 'xls'로 끝나는지 확인하는 방법.
file_name = "보고서.xlsx"
print(file_name.endswith(("xlsx", "xls")))
# ** 괄호 2개를 해준다.**



#파일 이름이 2020으로 시작하는지 확인하는 방법
file_name = "2020_보고서.xlsx"
print(file_name.startswith("2020"))



#rstrip 메서드
rstrip() 메서드를 사용하면 오른쪽 공백이 제거된 새로운 문자열 객체가 반환된다. 
그 값을 data라는 변수가 새로 바인딩한다. 
기존의 공백이 포함된 문자열은 메모리에서 자동으로 삭제된다.
data = "039490     "
data = data.rstrip()




이름의 첫 글자를 대문자로 변경해서 출력하라.
리스트 = ['dog', 'cat', 'parrot']
Dog
Cat
Parrot

for 이름 in 리스트:
  print(이름[0].upper()+이름[1:])
  
  
  
  
99부터 0까지 1씩 감소하는 숫자들을, 한 라인에 하나씩 출력하라.
for i in range(99,0,-1):
  print(i)
  
  
  
  
for문을 사용해서 아래와 같이 출력하라.

0.0
0.1
0.2
0.3
0.4
0.5
...
0.9

for num in range(10) :
    print(num / 10)
    
    
    
    
    
    
